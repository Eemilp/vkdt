#version 460
#extension GL_GOOGLE_include_directive    : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform params_t
{
  int primaries;
  int trc;
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;
  if(params.primaries == 0)
  { // TODO: use uploaded custom matrix?
  }
  else if(params.primaries == 1) // srgb
  { // convert linear rec2020 to linear rec709
    const mat3 M = mat3(
         1.66022677, -0.12455334, -0.01815514,
        -0.58754761,  1.13292605, -0.10060303,
        -0.07283825, -0.00834963,  1.11899817);
    rgb = M * rgb;
  }
  // else if(params.primaries == 2) // 2020 and 2100
  // { // identity 
  // }
  else if(params.primaries == 3) // adobeRGB
  {
    const mat3 rec2020_to_adobeRGB = mat3(
         1.15194302, -0.12454585, -0.02253539,
        -0.09753232,  1.13290963, -0.04979918,
        -0.05448118, -0.00837122,  1.07275365);
    rgb = rec2020_to_adobeRGB * rgb;
  }
  else if(params.primaries == 4) // P3
  {
    const mat3 rec2020_to_display_P3 = mat3(
     1.34353337, -0.06530851,  0.00282971,
    -0.28218904,  1.07578268, -0.01961215,
    -0.06142427, -0.01048453,  1.01717851);
    rgb = rec2020_to_display_P3 * rgb;
  }
  else if(params.primaries == 5) // XYZ
  {
    const mat3 rec2020_to_xyz = mat3(
        6.36958048e-01, 2.62700212e-01, 4.20575872e-11,
        1.44616904e-01, 6.77998072e-01, 2.80726931e-02,
        1.68880975e-01, 5.93017165e-02, 1.06098506e+00);
    rgb = rec2020_to_xyz * rgb;
  }

  // if(params.trc == 0) // linear
  if(params.trc == 1) // 709
  {
    const float a = 1.09929682680944;
    const float b = 0.018053968510807;
    rgb = mix(rgb * 4.5, pow(rgb, 1.0/2.2)*a - (a - 1), rgb > b);
  }
  else if(params.trc == 2) // sRGB
  {
    rgb = mix(rgb * 12.92, pow(rgb, 1.0/2.4)*1.055-0.055, rgb > 0.0031308);
  }
  else if(params.trc == 3) // PQ
  {
    const float c3 = 2392.0/128.0;
    const float c2 = 2413.0/128.0;
    const float c1 = c3-c2+1.0;
    const float m1 = 1305.0/8192.0;
    const float m2 = 2523.0/32.0;
    rgb = pow((c1+c2*pow(rgb, m1))/(1.0+c3*pow(rgb, m1)), m2);
  }
  else if(params.trc == 4) // DCI
  {
    rgb = pow(rgb, 1.0/2.6);
  }
  else if(params.trc == 5) // HLG
  {
    const float a = 0.17883277, b = 1.0-4.0*a, c = 0.5 - a*log(4.0*a);
    rgb = mix(sqrt(3.0*rgb), a*log(12.0*rgb-b) + c, rgb > 1.0/12.0);
  }
  else if(params.trc == 6) // gamma
  { // TODO get gamma from params
  }

  imageStore(img_out, ipos, vec4(rgb, 1.0));
}
