#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
#if 0
layout(std140, set = 0, binding = 1) uniform params_t
{ // this is the same as we have in `i-vid`
  int color;    // bt.709, bt.2020
  int trc;      // linear, bt.709, smpte2084, HLG
  int bits;     // 8, 10, 12, 16
  int chr;      // 420, 422, 444, we don't care here
  int colrange; // 16-235/240, 0-255
} params;
layout(push_constant, std140) uniform push_t
{
} push;
#endif
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_Y;
layout(set = 1, binding = 2) uniform writeonly image2D img_Cb;
layout(set = 1, binding = 3) uniform writeonly image2D img_Cr;

void main()
{
  // subgroup blocks are 2x2 blocks in the image:
  ivec2 ipos = 2*(ivec2(gl_GlobalInvocationID)/2);
  ipos.x += gl_SubgroupInvocationID & 2;
  ipos.y += gl_SubgroupInvocationID & 1;
  if(any(greaterThanEqual(ipos, imageSize(img_Y)))) return;
  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  // probably do this block in a regular colenc pass, fuck the global memory roundtrip
  // ===================================================
  // TODO: if color == 0 apply 2020 to 709 matrix
  // TODO: if trc non linear, apply it here
  // ===================================================
  
  // TODO: if color 0 or 1 apply different YCbCr matrix (??)
  // M3 in ITU-R BT.2087-0 goes from rec2020 to YCbCr (both normalised)
  mat3 M3 = mat3(
      0.2627, -0.2627/1.8814,  0.5,
      0.6780, -0.6780/1.8814, -0.6780/1.4746,
      0.0593,  0.5,           -0.0593/1.4746);
  vec3 YCbCr = M3 * rgb;

  // TODO: if full range: quantise to number of bits, rescale to max within data type (>8 is 16 bits)
  // params.bits == 0 // 8-bit
  YCbCr = YCbCr + vec3(0.0, 128.0/255.0, 128.0/255.0);
  // 8 bit mpeg range:
  YCbCr = (YCbCr * vec3(219.0, 224.0, 224.0) + vec3(16.0, 128.0, 128.0))/255.0;

  // =====
  // 420 TODO: implement 422 (only sub x) and 444 (no sub)
  // average chroma planes
  YCbCr.yz = subgroupClusteredAdd(YCbCr.yz, 4)/4.0;

  ivec2 cpos = ipos/2;
  // TODO: use subgroup partition2x2 to average subsampled stuff

  imageStore(img_Y,  ipos, vec4(Y));
  if((gl_SubgroupInvocationID & 3) == 0)
  { // if subgroup leader of 2x2 block
    imageStore(img_Cb, cpos, vec4(Cb));
    imageStore(img_Cr, cpos, vec4(Cr));
  }
}
