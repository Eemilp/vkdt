#version 460
#extension GL_GOOGLE_include_directive       : enable
#extension GL_KHR_shader_subgroup_basic      : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
// layout(std140, set = 0, binding = 1) uniform params_t { } params;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

mat2 inv_svd2x2(in mat2 M, out float angle)
{
  float E = (M[0][0] + M[1][1])/2.0;
  float F = (M[0][0] - M[1][1])/2.0;
  float G = (M[1][0] + M[0][1])/2.0;
  float H = (M[1][0] - M[0][1])/2.0;
  float Q = sqrt(E*E + H*H), R = sqrt(F*F + G*G);
  float sx = Q + R, sy = Q - R; // singular values
  float a1 = atan(G, F), a2 = atan(H, E);
  float theta = (a2-a1)/2.0, phi = (a2 + a1)/2.0;
  // now M = R(phi) * diag(sx,sy) * R(theta)


  angle = -theta-phi;
  if(sx < 0 || sy < 0) angle = -666.0;
  // and we want to return the inverse rotation matrix R(-theta) * R(-phi)
  return mat2(vec2(cos(angle), sin(angle)), vec2(sin(-angle), cos(angle)));
}

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  ivec2 opos = ipos;
#if 1 // this kills quite a lot of the samples!
  uint seed = ipos.x*13370000 + 37*ipos.y;
  ipos = clamp(ivec2(vec2(mrand(seed), mrand(seed))*imageSize(img_out)), ivec2(0), ivec2(imageSize(img_out)-1));
#endif

  vec2 mv = texelFetch(img_in, ipos, 0).rg;

  // Arun et al. 1987
  // q = R p + T
  vec2 mu_p = (ipos+0.5   )/(gl_SubgroupSize * vec2(imageSize(img_out)));
  vec2 mu_q = (ipos+0.5+mv)/(gl_SubgroupSize * vec2(imageSize(img_out)));

  mu_p.x = subgroupAdd(mu_p.x); mu_p.y = subgroupAdd(mu_p.y);
  mu_q.x = subgroupAdd(mu_q.x); mu_q.y = subgroupAdd(mu_q.y);

  vec2 p = (ipos+0.5   )/vec2(imageSize(img_out)) - mu_p;
  vec2 q = (ipos+0.5+mv)/vec2(imageSize(img_out)) - mu_q;

  mat2 H = outerProduct(p, q);
  H[0][0] = subgroupAdd(H[0][0]); H[0][1] = subgroupAdd(H[0][1]);
  H[1][0] = subgroupAdd(H[1][0]); H[1][1] = subgroupAdd(H[1][1]);

  float angle = 0.0;
  mat2 R = inv_svd2x2(H, angle);
  vec2 T = mu_q - R * mu_p;

  // now find consensus.
  // could do histogram voting (bin angles) but limited precision and dimension
  // ransac: search for other random positions and score
  float score = 0;
  for(int i=0;i<30;i++)
  {
    vec2 p2 = clamp(ivec2(vec2(mrand(seed), mrand(seed))*imageSize(img_out)), ivec2(0), ivec2(imageSize(img_out)-1));
    vec2 q2 = p2 + texelFetch(img_in, ivec2(p2), 0).rg;
    vec2 qt = R * p2 + T;
    if(distance(q2,qt) < 4.0) score++;
  }
  score = subgroupAdd(score);

  vec4 rgb = vec4(0.0);
  if(angle != -666.0)
  {
    float scale = 1.0;
    // rgb = vec4(mod(angle/3.1415, 1.0), 0.5 + scale *T.x, 0.5 + scale *T.y, 1);
    rgb = vec4(mod(angle/3.1415, 1.0), score, 0, 1);
    // rgb = vec4(mod(angle/3.1415, 1.0));
  }
  imageStore(img_out, opos, rgb);
}
